{"version":3,"sources":["utils/api/index.js","Decks/Deck.js","Decks/DeckList.js","Decks/StudyCardLogic.js","Decks/StudyDeck.js","Layout/NotFound.js","Layout/Header.js","Decks/EditDeck.js","Decks/DisplayDeck.js","Cards/EditCard.js","Cards/AddCard.js","Decks/CreateDeck.js","Layout/index.js","App.js","index.js"],"names":["API_BASE_URL","process","headers","Headers","stripCards","deck","cards","fetchJson","url","options","a","fetch","response","status","Error","statusText","json","name","listDecks","signal","method","body","JSON","stringify","readDeck","deckId","updatedDeck","id","deleteDeck","card","Number","cardId","updatedCard","Deck","useState","cardList","setCardList","history","useHistory","useEffect","then","d","find","d2","noOfCards","filter","length","className","style","justifyContent","float","description","to","type","marginLeft","title","onClick","window","confirm","go","DeckList","deckList","setDeckList","abortController","AbortController","abort","deckCardList","map","key","margin","StudyCardLogic","props","validCards","flipped","setFlipped","selectedCard","setSelectedCard","back","nextCard","push","front","StudyDeck","selectedDeck","setSelectedDeck","useParams","aria-label","aria-current","append","NotFound","Header","EditDeck","handleChange","target","value","onSubmit","event","preventDefault","updateDeck","htmlFor","onChange","DisplayDeck","displayDeck","setDisplayDeck","deleteCardHandler","deleteCard","validCardList","index","width","EditCard","readCard","updateCard","AddCard","formData","setFormData","createCard","placeholder","required","CreateDeck","createDeckHandler","lastDeck","createDeck","Layout","path","newDeck","exact","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5992d352.chunk.js","sourcesContent":["/**\n * Defines the base URL for the API.\n * The default values is overridden by the `API_BASE_URL` environment variable.\n */\nconst API_BASE_URL = process.env.API_BASE_URL || \"http://localhost:5000\";\n\n/**\n * Defines the default headers for these functions to work with `json-server`\n */\nconst headers = new Headers();\nheaders.append(\"Content-Type\", \"application/json\");\n\n/**\n * Removes the `cards` property from the deck so it is not accidentally saved with the deck.\n *\n * This function is NOT exported because it is not needed outside of this file.\n *\n * @param deck\n *  the deck instance\n * @returns {*}\n *  a copy of the deck instance with the `cards` property removed.\n */\nfunction stripCards(deck) {\n  const { cards, ...deckWithoutCards } = deck;\n  return deckWithoutCards;\n}\n\n/**\n * Fetch `json` from the specified URL and handle error status codes and ignore `AbortError`s\n *\n * This function is NOT exported because it is not needed outside of this file.\n *\n * @param url\n *  the url for the requst.\n * @param options\n *  any options for fetch\n * @returns {Promise<Error|any>}\n *  a promise that resolves to the `json` data or an error.\n *  If the response is not in the 200 - 399 range the promise is rejected.\n */\nasync function fetchJson(url, options) {\n  try {\n    const response = await fetch(url, options);\n    if (response.status < 200 || response.status > 399) {\n      throw new Error(`${response.status} - ${response.statusText}`);\n    }\n    return await response.json();\n  } catch (error) {\n    if (error.name !== \"AbortError\") {\n      throw error;\n    }\n  }\n}\n\n/**\n * Retrieves all existing decks.\n * @returns {Promise<[deck]>}\n *  a promise that resolves to a possibly empty array of decks saved in the database.\n */\nexport async function listDecks(signal) {\n  const url = `${API_BASE_URL}/decks?_embed=cards`;\n  return await fetchJson(url, { signal });\n}\n\n/**\n * Saves deck to the database (public/data/db.json).\n * There is no validation done on the deck object, any object will be saved.\n * @param deck\n *  the deck to save, which must not have an `id` property\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<deck>}\n *  a promise that resolves the saved deck, which will now have an `id` property.\n */\nexport async function createDeck(deck, signal) {\n  const url = `${API_BASE_URL}/decks`;\n  const options = {\n    method: \"POST\",\n    headers,\n    body: JSON.stringify(stripCards(deck)),\n    signal,\n  };\n  return await fetchJson(url, options);\n}\n\n/**\n * Retrieves the deck with the specified `deckId`\n * @param deckId\n *  the `id` property matching the desired deck.\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<any>}\n *  a promise that resolves to the saved deck.\n */\nexport async function readDeck(deckId, signal) {\n  const url = `${API_BASE_URL}/decks/${deckId}?_embed=cards`;\n  return await fetchJson(url, { signal });\n}\n\n/**\n * Updates an existing deck\n * @param updatedDeck\n *  the deck to save, which must have an `id` property.\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<Error|*>}\n *  a promise that resolves to the updated deck.\n */\nexport async function updateDeck(updatedDeck, signal) {\n  const url = `${API_BASE_URL}/decks/${updatedDeck.id}?_embed=cards`;\n  const options = {\n    method: \"PUT\",\n    headers,\n    body: JSON.stringify(stripCards(updatedDeck)),\n    signal,\n  };\n  return await fetchJson(url, options);\n}\n\n/**\n * Deletes the deck with the specified `deckId`.\n * @param deckId\n *  the id of the deck to delete\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<Error|*>}\n *  a promise that resolves to an empty object.\n */\nexport async function deleteDeck(deckId, signal) {\n  const url = `${API_BASE_URL}/decks/${deckId}`;\n  const options = { method: \"DELETE\", signal };\n  return await fetchJson(url, options);\n}\n\n/**\n * Retrieves all cards associated with the specified `deckId`.\n * @param deckId\n *  the id of the target deck\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<Error|*>}\n *  a promise that resolves to a possible empty array of cards.\n */\nexport async function listCards(deckId, signal) {\n  const url = `${API_BASE_URL}/cards?deckId=${deckId}`;\n  return await fetchJson(url, { signal });\n}\n\n/**\n * Creates a new card associated with the specified `deckId`.\n * There is no validation that there is an existing deck with the specified `deckId`.\n * @param deckId\n *  the id of the target deck\n * @param card\n *  the card to create, which must not have an `id` property\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<Error|*>}\n *  a promise that resolves to the new card, which will have an `id` property.\n */\nexport async function createCard(deckId, card, signal) {\n  // There is a bug in json-server, if you post to /decks/:deckId/cards the associated deckId is a string\n  // and the card is not related to the deck because the data types of the ID's are different.\n  const url = `${API_BASE_URL}/cards`;\n  card.deckId = Number(deckId);\n  const options = {\n    method: \"POST\",\n    headers,\n    body: JSON.stringify(card),\n    signal,\n  };\n  return await fetchJson(url, options);\n}\n\n/**\n * Retrieves the card with the specified `cardId`\n * @param cardId\n *  the id of the target\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<Error|*>}\n *  a promise that resolves to the saved card.\n */\nexport async function readCard(cardId, signal) {\n  const url = `${API_BASE_URL}/cards/${cardId}`;\n  return await fetchJson(url, { signal });\n}\n\n/**\n * Updates an existing deck\n * @param updatedCard\n *  the card to save, which must have an `id` property.\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<Error|*>}\n *  a promise that resolves to the updated card.\n */\nexport async function updateCard(updatedCard, signal) {\n  const url = `${API_BASE_URL}/cards/${updatedCard.id}`;\n  const options = {\n    method: \"PUT\",\n    headers,\n    body: JSON.stringify(updatedCard),\n  };\n  return await fetchJson(url, options);\n}\n\n/**\n * Deletes the card with the specified `cardId`.\n * @param cardId\n *  the id of the card to delete\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<Error|*>}\n *  a promise that resolves to an empty object.\n */\nexport async function deleteCard(cardId, signal) {\n  const url = `${API_BASE_URL}/cards/${cardId}`;\n  const options = { method: \"DELETE\", signal };\n  return await fetchJson(url, options);\n}\n","import React, { useState, useEffect } from 'react'\nimport { Link, useHistory } from 'react-router-dom'\n\nimport { listDecks, deleteDeck } from '../utils/api'\n\nexport default function Deck({ deck }) {\n  const [cardList, setCardList] = useState([])\n  const history = useHistory()\n\n  useEffect(() => {\n    listDecks().then((d) => {\n      const cards = d.find((d2) => d2.id === deck.id).cards\n      setCardList(cards)\n    })\n  }, [deck.id])\n\n  function deleteHandler(value) {\n    deleteDeck(value)\n    history.go(0)\n  }\n\n  const noOfCards = cardList && cardList.filter((card) => !card.cards).length\n\n  return (\n    <div className='card m-1'>\n      <div className='card-body'>\n        <div style={{ justifyContent: 'space-between' }}>\n          <p className='text-muted' style={{ float: 'right' }}>\n            {`${noOfCards} cards`}\n          </p>\n          <h5 className='card-title'>{deck.name}</h5>\n        </div>\n        <p className='card-text'>{deck.description}</p>\n        <Link to={`/decks/${deck.id}`}>\n          <button type='button' className='btn btn-secondary'>\n            <i className='fas fa-eye'></i> View\n          </button>\n        </Link>\n        <Link to={`/decks/${deck.id}/study`}>\n          <button\n            type='button'\n            className='btn btn-primary'\n            style={{ marginLeft: '5px' }}\n          >\n            <i className='fas fa-book'></i> Study\n          </button>\n        </Link>\n        <button\n          type='button'\n          className='btn btn-danger'\n          title='Delete'\n          style={{ float: 'right' }}\n          onClick={() => {\n            if (window.confirm('Delete this deck?')) {\n              deleteHandler(deck.id, cardList)\n            }\n          }}\n        >\n          <i className='fas fa-trash-alt'></i>\n        </button>\n      </div>\n    </div>\n  )\n}\n","import React, { useState, useEffect } from 'react'\nimport { Link } from 'react-router-dom'\n\nimport { listDecks } from '../utils/api'\nimport Deck from './Deck'\n\nexport default function DeckList({ deckList, setDeckList }) {\n  useEffect(() => {\n    const abortController = new AbortController()\n\n    listDecks(abortController.signal).then(setDeckList)\n\n    return () => abortController.abort()\n  }, [])\n\n  const deckCardList =\n    deckList && deckList.map((deck) => <Deck key={deck.id} deck={deck} />)\n\n  return (\n    <main className='container mb-3'>\n      <Link to='decks/new'>\n        <button\n          type='button'\n          className='btn btn-secondary btn-lg'\n          style={{ margin: '5px' }}\n        >\n          <i className='fas fa-plus'></i> Create Deck\n        </button>\n      </Link>\n      <section className='column'>{deckCardList}</section>\n    </main>\n  )\n}\n","import React, { Fragment, useState } from 'react';\nimport { useHistory } from 'react-router-dom';\n\nexport default function StudyCardLogic(props) {\n\tconst { validCards } = props;\n\tconst history = useHistory();\n\tconst [flipped, setFlipped] = useState(false);\n\tconst [selectedCard, setSelectedCard] = useState(0);\n\n\treturn (\n\t\t<div className='card'>\n\t\t\t<div className='card-body'>\n\t\t\t\t<h5 className='card-title'>\n\t\t\t\t\t{'Card ' + Number(selectedCard + 1) + ' of ' + validCards.length}\n\t\t\t\t</h5>\n\t\t\t\t{!flipped ? (\n\t\t\t\t\t<Fragment>\n\t\t\t\t\t\t<p className='card-text'>{validCards[selectedCard].front}</p>\n\t\t\t\t\t\t<button\n\t\t\t\t\t\t\ttype='button'\n\t\t\t\t\t\t\tclassName='btn btn-secondary'\n\t\t\t\t\t\t\tstyle={{ float: 'left' }}\n\t\t\t\t\t\t\tonClick={() => setFlipped(true)}>\n\t\t\t\t\t\t\tFlip\n\t\t\t\t\t\t</button>\n\t\t\t\t\t</Fragment>\n\t\t\t\t) : (\n\t\t\t\t\t<Fragment>\n\t\t\t\t\t\t<p className='card-text'>{validCards[selectedCard].back}</p>\n\t\t\t\t\t\t<button\n\t\t\t\t\t\t\ttype='button'\n\t\t\t\t\t\t\tclassName='btn btn-secondary'\n\t\t\t\t\t\t\tstyle={{ float: 'left' }}\n\t\t\t\t\t\t\tonClick={() => setFlipped(false)}>\n\t\t\t\t\t\t\tFlip\n\t\t\t\t\t\t</button>\n\t\t\t\t\t\t<button\n\t\t\t\t\t\t\ttype='button'\n\t\t\t\t\t\t\tclassName='btn btn-primary'\n\t\t\t\t\t\t\tstyle={{ float: 'left', marginLeft: '5px' }}\n\t\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\t\tconst nextCard = selectedCard + 1;\n\t\t\t\t\t\t\t\tif (validCards[nextCard]) {\n\t\t\t\t\t\t\t\t\tsetSelectedCard(nextCard);\n\t\t\t\t\t\t\t\t\tsetFlipped(false);\n\t\t\t\t\t\t\t\t} else if (window.confirm('Restart Cards?')) {\n\t\t\t\t\t\t\t\t\tsetSelectedCard(0);\n\t\t\t\t\t\t\t\t\tsetFlipped(false);\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\thistory.push('/');\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}}>\n\t\t\t\t\t\t\tNext\n\t\t\t\t\t\t</button>\n\t\t\t\t\t</Fragment>\n\t\t\t\t)}\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n","import React, { useEffect, useState, Fragment } from 'react'\nimport { useParams, Link } from 'react-router-dom'\n\nimport { readDeck } from '../utils/api'\nimport StudyCardLogic from './StudyCardLogic'\n\nexport default function StudyDeck({ selectedDeck, setSelectedDeck }) {\n  const [cardList, setCardList] = useState([])\n  const { deckId } = useParams()\n\n  useEffect(() => {\n    const abortController = new AbortController()\n    readDeck(deckId, abortController.signal).then((deck) => {\n      setSelectedDeck(deck)\n      setCardList(deck.cards)\n    })\n\n    return () => abortController.abort()\n  }, [deckId])\n\n  const validCards = cardList && cardList.filter((card) => !card.cards)\n\n  return (\n    <Fragment>\n      <nav aria-label='breadcrumb'>\n        <ol className='breadcrumb'>\n          <li className='breadcrumb-item'>\n            <Link to='/'>\n              <i className='fas fa-home'></i> Home\n            </Link>\n          </li>\n          <li className='breadcrumb-item active' aria-current='page'>\n            <Link to={`/decks/${selectedDeck.id}`}>{selectedDeck.name}</Link>\n          </li>\n          <li className='breadcrumb-item active' aria-current='page'>\n            Study\n          </li>\n        </ol>\n      </nav>\n      <h1>{'Study: ' + selectedDeck.name}</h1>\n      {cardList.length > 0 && validCards.length > 2 ? (\n        <StudyCardLogic validCards={validCards} />\n      ) : (\n        <Fragment>\n          <h3>Not enough cards.</h3>\n          <p>\n            {'You need at least 3 cards to study. There are ' +\n              validCards.length +\n              ' cards in the deck.'}{' '}\n          </p>\n          <Link to={`/decks/${selectedDeck.id}/cards/new`}>\n            <button\n              type='button'\n              className='btn btn-primary'\n              style={{ marginLeft: '5px' }}\n            >\n              <i className='fas fa-plus'></i> Add Cards\n            </button>\n          </Link>\n        </Fragment>\n      )}\n    </Fragment>\n  )\n}\n","import React from 'react';\n\nfunction NotFound() {\n\treturn (\n\t\t<div className='NotFound'>\n\t\t\t<h1>Not Found</h1>\n\t\t</div>\n\t);\n}\n\nexport default NotFound;\n","import React from 'react';\n\nfunction Header() {\n\treturn (\n\t\t<header className='jumbotron bg-dark'>\n\t\t\t<div className='container text-white'>\n\t\t\t\t<h1 className='display-4'>Flashcard-o-matic</h1>\n\t\t\t\t<p className='lead'>Discover The Flashcard Difference.</p>\n\t\t\t</div>\n\t\t</header>\n\t);\n}\n\nexport default Header;\n","import React, { useEffect } from 'react'\nimport { useParams, Link, useHistory } from 'react-router-dom'\nimport { readDeck, updateDeck } from '../utils/api'\n\nexport default function EditDeck({ selectedDeck, setSelectedDeck }) {\n  const { deckId } = useParams()\n  const history = useHistory()\n\n  useEffect(() => {\n    const abortController = new AbortController()\n    readDeck(deckId, abortController.signal).then(setSelectedDeck)\n\n    return () => abortController.abort()\n  }, [deckId])\n\n  const handleChange = ({ target }) => {\n    setSelectedDeck({\n      ...selectedDeck,\n      [target.name]: target.value,\n    })\n  }\n\n  const handleSubmit = (event) => {\n    event.preventDefault()\n    updateDeck(selectedDeck)\n    history.push(`/decks/${deckId}`)\n  }\n\n  return (\n    <div className='container'>\n      <nav aria-label='breadcrumb'>\n        <ol className='breadcrumb'>\n          <li className='breadcrumb-item'>\n            <Link to='/'>\n              <i className='fas fa-home'></i> Home\n            </Link>\n          </li>\n          <li className='breadcrumb-item active' aria-current='page'>\n            <Link to={`/decks/${selectedDeck.id}`}>{selectedDeck.name}</Link>\n          </li>\n          <li className='breadcrumb-item active' aria-current='page'>\n            Edit Deck\n          </li>\n        </ol>\n      </nav>\n      <h1>Edit Deck</h1>\n      <form onSubmit={handleSubmit}>\n        <div className='form-group'>\n          <label htmlFor='name'>Name</label>\n          <textarea\n            className='form-control'\n            id='name'\n            type='text'\n            name='name'\n            onChange={handleChange}\n            value={selectedDeck.name}\n          />\n        </div>\n        <div className='form-group'>\n          <label htmlFor='description'>Description</label>\n          <textarea\n            className='form-control'\n            id='description'\n            type='text'\n            name='description'\n            onChange={handleChange}\n            value={selectedDeck.description}\n          />\n        </div>\n        <div className='buttons mb-3'>\n          <Link\n            to={`/decks/${selectedDeck.id}`}\n            type='button'\n            className='btn btn-secondary mr-2'\n          >\n            Cancel\n          </Link>\n          <button type='submit' className='btn btn-primary'>\n            Submit\n          </button>\n        </div>\n      </form>\n    </div>\n  )\n}\n","import React, { useEffect, useState } from 'react'\nimport { useParams, Link, useHistory } from 'react-router-dom'\nimport { readDeck, deleteDeck, deleteCard } from '../utils/api'\n\nexport default function DisplayDeck() {\n  const [displayDeck, setDisplayDeck] = useState([])\n  const { deckId } = useParams()\n  const history = useHistory()\n\n  useEffect(() => {\n    const abortController = new AbortController()\n    readDeck(deckId, abortController.signal).then(setDisplayDeck)\n\n    return () => abortController.abort()\n  }, [deckId])\n\n  const cardList = displayDeck && displayDeck.cards\n  const validCards = cardList && cardList.filter((card) => !card.cards)\n\n  function deleteDeckHandler(deck) {\n    deleteDeck(deck.id)\n    history.push('/')\n    history.go(0)\n  }\n\n  function deleteCardHandler(card) {\n    const id = card.id\n    deleteCard(id)\n    history.go(0)\n  }\n\n  const validCardList =\n    validCards &&\n    validCards.map((card, index) => (\n      <div className='card' key={index}>\n        <div className='card-body'>\n          <div style={{ float: 'left', width: '50%' }}>\n            <p className='text-muted'>{card.front}</p>\n          </div>\n          <div style={{ float: 'right', width: '50%' }}>\n            <p className='text-muted' style={{ float: 'right' }}>\n              {card.back}\n            </p>\n          </div>\n          <br />\n          <div style={{ float: 'right' }}>\n            {/* Edit Card */}\n            <Link to={`/decks/${displayDeck.id}/cards/${card.id}/edit`}>\n              <button type='button' className='btn btn-secondary mr-2'>\n                <i className='fas fa-pencil-alt'></i> Edit\n              </button>\n            </Link>\n            {/* Delete Card */}\n            <button\n              type='button'\n              className='btn btn-danger'\n              title='Delete'\n              onClick={() => {\n                if (window.confirm('Delete this card?')) deleteCardHandler(card)\n              }}\n            >\n              <i className='fas fa-trash-alt'></i>\n            </button>\n          </div>\n        </div>\n      </div>\n    ))\n\n  return (\n    <div className='container'>\n      <nav aria-label='breadcrumb'>\n        <ol className='breadcrumb'>\n          <li className='breadcrumb-item'>\n            <Link to='/'>\n              <i className='fas fa-home'></i> Home\n            </Link>\n          </li>\n          <li className='breadcrumb-item active' aria-current='page'>\n            {displayDeck.name}\n          </li>\n        </ol>\n      </nav>\n      <div>\n        <h3>{displayDeck.name}</h3>\n        <p>{displayDeck.description}</p>\n      </div>\n      <div>\n        {/* Edit Deck */}\n        <Link to={`/decks/${displayDeck.id}/edit`}>\n          <button type='button' className='btn btn-secondary'>\n            <i className='fas fa-pencil-alt'></i> Edit\n          </button>\n        </Link>\n        {/* Study Deck */}\n        <Link to={`/decks/${displayDeck.id}/study`}>\n          <button\n            type='button'\n            className='btn btn-primary'\n            style={{ marginLeft: '5px' }}\n          >\n            <i className='fas fa-book'></i> Study\n          </button>\n        </Link>\n        {/* Add Cards */}\n        <Link to={`/decks/${displayDeck.id}/cards/new`}>\n          <button\n            type='button'\n            className='btn btn-primary'\n            style={{ marginLeft: '5px' }}\n          >\n            <i className='fas fa-plus'></i> Add Cards\n          </button>\n        </Link>\n        {/* Delete Deck */}\n        <button\n          type='button'\n          className='btn btn-danger'\n          style={{ float: 'right' }}\n          title='Delete'\n          onClick={() => {\n            if (window.confirm('Delete this deck?'))\n              deleteDeckHandler(displayDeck, cardList)\n          }}\n        >\n          <i className='fas fa-trash-alt'></i>\n        </button>\n      </div>\n      <br />\n      <div className='mb-3'>\n        <h2>Cards</h2>\n        <section className='column'>{validCardList}</section>\n      </div>\n    </div>\n  )\n}\n","import React, { useState, useEffect } from 'react'\nimport { useParams, Link, useHistory } from 'react-router-dom'\nimport { readCard, readDeck, updateCard } from '../utils/api'\n\nexport default function EditCard({ selectedDeck, setSelectedDeck }) {\n  const history = useHistory()\n  const [selectedCard, setSelectedCard] = useState([])\n  const { deckId, cardId } = useParams()\n  useEffect(() => {\n    const abortController = new AbortController()\n    readDeck(deckId, abortController.signal).then((deck) => {\n      setSelectedDeck(deck)\n      readCard(cardId, abortController.signal).then(setSelectedCard)\n    })\n  }, [deckId, cardId])\n\n  const handleChange = ({ target }) => {\n    setSelectedCard({\n      ...selectedCard,\n      [target.name]: target.value,\n    })\n  }\n\n  const handleSubmit = (event) => {\n    event.preventDefault()\n    updateCard(selectedCard)\n    history.push(`/decks/${selectedDeck.id}`)\n  }\n\n  return (\n    <div className='container'>\n      <nav aria-label='breadcrumb'>\n        <ol className='breadcrumb'>\n          <li className='breadcrumb-item'>\n            <Link to='/'>\n              <i className='fas fa-home'></i> Home\n            </Link>\n          </li>\n          <li className='breadcrumb-item active' aria-current='page'>\n            <Link to={`/decks/${selectedDeck.id}`}>{selectedDeck.name}</Link>\n          </li>\n          <li className='breadcrumb-item active' aria-current='page'>\n            {'Edit Card ' + cardId}\n          </li>\n        </ol>\n      </nav>\n      <h3>Edit Card</h3>\n      <form onSubmit={handleSubmit}>\n        <div className='form-group'>\n          <label htmlFor='front'>Front</label>\n          <textarea\n            className='form-control'\n            name='front'\n            id='front'\n            type='text'\n            value={selectedCard.front}\n            onChange={handleChange}\n          ></textarea>\n        </div>\n        <div className='form-group'>\n          <label htmlFor='back'>Back</label>\n          <textarea\n            className='form-control'\n            name='back'\n            id='back'\n            type='text'\n            value={selectedCard.back}\n            onChange={handleChange}\n          ></textarea>\n        </div>\n        <div className='buttons mb-3'>\n          <Link\n            to={`/decks/${selectedDeck.id}`}\n            className='btn btn-secondary mr-2'\n          >\n            Cancel\n          </Link>\n          <button type='submit' className='btn btn-primary'>\n            Save\n          </button>\n        </div>\n      </form>\n    </div>\n  )\n}\n","import React, { useEffect, useState } from 'react'\nimport { useParams, Link, useHistory } from 'react-router-dom'\nimport { readDeck, createCard } from '../utils/api'\n\nexport default function AddCard({ selectedDeck, setSelectedDeck }) {\n  const { deckId } = useParams()\n  const history = useHistory()\n\n  useEffect(() => {\n    const abortController = new AbortController()\n    readDeck(deckId, abortController.signal).then(setSelectedDeck)\n\n    return () => abortController.abort()\n  }, [deckId])\n\n  const initialState = {\n    front: '',\n    back: '',\n  }\n\n  const [formData, setFormData] = useState({ ...initialState })\n  const handleChange = ({ target }) => {\n    setFormData({\n      ...formData,\n      [target.name]: target.value,\n    })\n  }\n\n  const handleSubmit = (event) => {\n    event.preventDefault()\n    createCard(deckId, formData)\n    history.go(0)\n  }\n\n  return (\n    <div className='container'>\n      <nav aria-label='breadcrumb'>\n        <ol className='breadcrumb'>\n          <li className='breadcrumb-item'>\n            <Link to='/'>\n              <i className='fas fa-home'></i> Home\n            </Link>\n          </li>\n          <li className='breadcrumb-item active' aria-current='page'>\n            <Link to={`/decks/${selectedDeck.id}`}>{selectedDeck.name}</Link>\n          </li>\n          <li className='breadcrumb-item active' aria-current='page'>\n            Add Card\n          </li>\n        </ol>\n      </nav>\n      <h3>{selectedDeck.name + ': Add Card'}</h3>\n      <form onSubmit={handleSubmit}>\n        <div className='form-group'>\n          <label htmlFor='name'>Front</label>\n          <textarea\n            className='form-control'\n            name='front'\n            id='front'\n            placeholder='Front side of card'\n            onChange={handleChange}\n            value={formData.front}\n            required\n          />\n        </div>\n        <div className='form-group'>\n          <label htmlFor='description'>Back</label>\n          <textarea\n            className='form-control'\n            name='back'\n            id='back'\n            placeholder='Back side of card'\n            onChange={handleChange}\n            value={formData.back}\n            required\n          />\n        </div>\n        <div className='buttons mb-3'>\n          <Link\n            to={`/decks/${selectedDeck.id}`}\n            className='btn btn-secondary mr-2'\n          >\n            Done\n          </Link>\n          <button type='submit' className='btn btn-primary'>\n            Save\n          </button>\n        </div>\n      </form>\n    </div>\n  )\n}\n","import React, { useState } from 'react'\nimport { useHistory, Link } from 'react-router-dom'\nimport { createDeck } from '../utils/api/index'\n\nexport default function CreateDeck({ deckList, createDeckHandler }) {\n  const history = useHistory()\n\n  const initialState = {\n    name: '',\n    description: '',\n  }\n\n  let lastDeck = deckList[deckList.length - 1]\n\n  const [formData, setFormData] = useState({ ...initialState })\n  const handleChange = ({ target }) => {\n    setFormData({\n      ...formData,\n      [target.name]: target.value,\n    })\n  }\n\n  const handleSubmit = (event) => {\n    event.preventDefault()\n    const response = createDeck(formData)\n    createDeckHandler(response)\n    history.push(`/decks/${lastDeck.id + 1}`)\n    history.go(0)\n  }\n\n  return (\n    <div className='container'>\n      <nav aria-label='breadcrumb'>\n        <ol className='breadcrumb'>\n          <li className='breadcrumb-item'>\n            <Link to='/'>\n              <i className='fas fa-home'></i> Home\n            </Link>\n          </li>\n          <li className='breadcrumb-item active' aria-current='page'>\n            Create Deck\n          </li>\n        </ol>\n      </nav>\n      <h1> Create Deck</h1>\n      <form onSubmit={handleSubmit}>\n        <label htmlFor='name'>Name</label> <br />\n        <input\n          className='form-control'\n          id='name'\n          type='text'\n          name='name'\n          placeholder='Deck Name'\n          onChange={handleChange}\n          value={formData.name}\n        />{' '}\n        <br />\n        <br />\n        <label htmlFor='description'>Description</label>\n        <br />\n        <textarea\n          className='form-control'\n          id='description'\n          type='text'\n          name='description'\n          placeholder='Brief description of the deck'\n          onChange={handleChange}\n          value={formData.description}\n        />{' '}\n        <br />\n        <div className='buttons mb-3'>\n          <button type='submit' className='btn btn-primary mr-2'>\n            Submit\n          </button>\n          <button\n            type='button'\n            className='btn btn-secondary'\n            onClick={() => history.push('/')}\n          >\n            Cancel\n          </button>\n        </div>\n      </form>\n    </div>\n  )\n}\n","import React, { useState } from 'react'\nimport { Redirect, Route, Switch } from 'react-router-dom'\nimport Home from '../Decks/DeckList'\nimport StudyDeck from '../Decks/StudyDeck'\nimport NotFound from './NotFound'\nimport Header from './Header'\nimport DeckEdit from '../Decks/EditDeck'\nimport DeckView from '../Decks/DisplayDeck'\nimport CardEdit from '../Cards/EditCard'\nimport CardCreate from '../Cards/AddCard'\nimport DeckCreate from '../Decks/CreateDeck'\n\nfunction Layout() {\n  const [deckList, setDeckList] = useState([])\n  const [selectedDeck, setSelectedDeck] = useState([])\n\n  const createDeckHandler = (newDeck) => {\n    setDeckList([...deckList, newDeck])\n  }\n\n  return (\n    <>\n      <Header />\n      <div className='container'>\n        <Switch>\n          <Route path='/decks/new'>\n            <DeckCreate\n              deckList={deckList}\n              createDeckHandler={createDeckHandler}\n            />\n          </Route>\n          <Route path='/decks/:deckId/study'>\n            <StudyDeck\n              selectedDeck={selectedDeck}\n              setSelectedDeck={setSelectedDeck}\n            />\n          </Route>\n          <Route path='/decks/:deckId/edit'>\n            <DeckEdit\n              selectedDeck={selectedDeck}\n              setSelectedDeck={setSelectedDeck}\n            />\n          </Route>\n          <Route path='/decks/:deckId/cards/new'>\n            <CardCreate\n              selectedDeck={selectedDeck}\n              setSelectedDeck={setSelectedDeck}\n            />\n          </Route>\n          <Route path='/decks/:deckId/cards/:cardId/edit'>\n            <CardEdit\n              selectedDeck={selectedDeck}\n              setSelectedDeck={setSelectedDeck}\n            />\n          </Route>\n          <Route exact={true} path='/decks/:deckId'>\n            <DeckView />\n          </Route>\n          <Route exact={true} path='/decks'>\n            <Redirect to='/' />\n          </Route>\n          <Route exact={true} path='/'>\n            <Home deckList={deckList} setDeckList={setDeckList} />\n          </Route>\n          <Route>\n            <NotFound />\n          </Route>\n        </Switch>\n      </div>\n    </>\n  )\n}\n\nexport default Layout\n","import React from \"react\";\nimport { Route, Switch } from \"react-router-dom\";\nimport Layout from \"./Layout\";\n\n/**\n * App is a wrapper for <Layout>, you should not need to change this file.\n */\n\nfunction App() {\n  return (\n    <div className=\"app-routes\">\n      <Switch>\n        <Route path=\"/\">\n          <Layout />\n        </Route>\n      </Switch>\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport { BrowserRouter as Router } from \"react-router-dom\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Router>\n      <App />\n    </Router>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}